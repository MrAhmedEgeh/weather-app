{"version":3,"sources":["assets/day.jpg","assets/night.jpg","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weatherAPI","useState","query","setQuery","isLoading","SetIsLoading","name","sys","country","main","temp","weather","setWeather","image","Date","getHours","day","night","backgroundCSS","backgroundImage","width","height","backgroundSize","backgroundPosition","style","className","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","result","console","log","autoFocus","date","dayInLetters","getDay","dayNumber","getDate","month","getMonth","year","getFullYear","DateMaker","class","cod","message","Math","round","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAAe,G,MAAA,IAA0B,iCCA1B,MAA0B,kC,OCuF1BA,EAlFC,WAAO,IAAD,IAEZC,EACG,mCADHA,EAEI,2CAGV,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,mBAAS,CACnCK,KAAM,OACNC,IAAK,CAACC,QAAS,WACfC,KAAM,CAACC,KAAM,KAHjB,mBAAOC,EAAP,KAAgBC,EAAhB,KAMMC,GAAS,IAAIC,MAAOC,WAAc,GAAKC,EAAMC,EAE7CC,EAAgB,CAClBC,gBAAgB,OAAD,OAASN,EAAT,KACfO,MAAO,OACPC,OAAQ,QACRC,eAAgB,QAChBC,mBAAoB,iBA6BxB,OACI,qBAAKC,MAAON,EAAeO,UAAU,UAArC,SACY,sBAAKA,UAAU,oBAAf,UACA,qBAAKA,UAAU,eAAf,SACI,uBACAC,KAAK,SACLC,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAO1B,EAAS0B,EAAEC,OAAOC,QACnCA,MAAO7B,EACP8B,WAtBL,SAAAH,GACC,UAAVA,EAAEI,MACJ5B,GAAa,GACb6B,MAAM,GAAD,OAAIlC,EAAJ,qBAAgCE,EAAhC,+BAA4DF,IAC9DmC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ1B,EAAW0B,GACXnC,EAAS,IACToC,QAAQC,IAAIF,GACZjC,GAAa,QAcDoC,WAAS,MAGb,sBAAKhB,UAAU,UAAf,iBAA0Bd,QAA1B,IAA0BA,OAA1B,EAA0BA,EAASL,KAAnC,aAA4CK,QAA5C,IAA4CA,GAA5C,UAA4CA,EAASJ,WAArD,aAA4C,EAAcC,WAC1D,qBAAKiB,UAAU,OAAf,SAxCE,SAACiB,GACf,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAEtDD,EAAKE,UACzBC,EAAYH,EAAKI,UAEjBC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAMzGL,EAAKM,YACpBC,EAAOP,EAAKQ,cAEhB,MAAM,GAAN,OAAUP,EAAV,aAA2BE,EAA3B,YAAwCE,EAAxC,YAAiDE,GA8BdE,CAAU,IAAIrC,QAEjCV,EAAa,qBAAKgD,MAAM,kBAEP,SAAV,OAAPzC,QAAO,IAAPA,OAAA,EAAAA,EAAS0C,KACL,8BACI,+BAAO1C,EAAQ2C,YAInB,qBAAK7B,UAAS,kBAAaZ,IAAUI,EAAQ,QAAU,IAAvD,SAA6D,iCAAOsC,KAAKC,MAAL,OAAW7C,QAAX,IAAWA,GAAX,UAAWA,EAASF,YAApB,aAAW,EAAeC,MAAjC,mBCpE1E+C,MATf,WAEE,OACE,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b7abc360.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/day.4b2b380d.jpg\";","export default __webpack_public_path__ + \"static/media/night.30e513ad.jpg\";","import React, {useState} from 'react';\r\nimport './Weather.css';\r\nimport day from '../assets/day.jpg';\r\nimport night from '../assets/night.jpg';\r\n\r\nconst Weather = () => {\r\n    // API INFO\r\n    const weatherAPI = {\r\n        key: \"d976923e230349be8f07ad73b576d3f6\",\r\n        base: \"https://api.openweathermap.org/data/2.5/\"\r\n      }\r\n    // STATES\r\n    const [query, setQuery] = useState('');\r\n    const [isLoading, SetIsLoading] = useState(false);\r\n    const [weather, setWeather] = useState({\r\n        name: 'City',\r\n        sys: {country: 'Country'},\r\n        main: {temp: 0}\r\n    });\r\n    // AN IMAGE DURING THE DAY AND ANOTHER DURING THE NIGHT\r\n    const image = (new Date().getHours()) > 12 ? day : night;\r\n    // STYLE THE BACKGROUND IMAGE\r\n    const backgroundCSS = {\r\n        backgroundImage: `url(${image})`,\r\n        width: '100%', \r\n        height: '100vh',\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center center'\r\n    }\r\n    // CONSTRUCT A DATE\r\n    const DateMaker = (date) =>{\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n        let dayInLetters = days[date.getDay()];\r\n        let dayNumber = date.getDate();\r\n\r\n        let month = months[date.getMonth()];\r\n        let year = date.getFullYear();\r\n\r\n        return `${dayInLetters}, ${dayNumber} ${month} ${year}`;\r\n    }\r\n    // USE API TO GET THE TEMPERATURE\r\n    const search = e => {\r\n      if (e.key === \"Enter\") {\r\n        SetIsLoading(true);\r\n        fetch(`${weatherAPI.base}weather?q=${query}&units=metric&APPID=${weatherAPI.key}`)\r\n          .then(res => res.json())\r\n          .then(result => {\r\n            setWeather(result);\r\n            setQuery('');\r\n            console.log(result);\r\n            SetIsLoading(false);\r\n          });\r\n      }\r\n    }\r\n    return(\r\n        <div style={backgroundCSS} className=\"weather\">\r\n                    <div className=\"weather-container\">\r\n                    <div className=\"search-input\">\r\n                        <input \r\n                        type=\"search\" \r\n                        placeholder=\"Enter a country\" \r\n                        onChange={(e) => setQuery(e.target.value)}\r\n                        value={query}\r\n                        onKeyPress={search}\r\n                        autoFocus \r\n                        />\r\n                    </div>\r\n                    <div className=\"country\">{weather?.name} - {weather?.sys?.country}</div>\r\n                    <div className=\"date\">{DateMaker(new Date())}</div>\r\n                    {\r\n                        isLoading ? (<div class=\"lds-dual-ring\"></div>) \r\n                        :\r\n                        weather?.cod === \"404\" ? (\r\n                            <div>\r\n                                <span>{weather.message}</span>\r\n                            </div>\r\n                            )  \r\n                            :\r\n                            <div className={`current ${image === night ? 'night' : ''}`}><span>{Math.round(weather?.main?.temp)}Â°c</span></div>\r\n                    }\r\n\r\n                    </div>\r\n                </div>\r\n        )\r\n}\r\nexport default Weather;","import './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}